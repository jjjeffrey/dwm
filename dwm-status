#!/bin/bash

#
# dwm-status - a status bar for dwm.
# Copyright (c) 2013-2015, Christopher Jeffrey (MIT License).
# https://github.com/chjj/dwm
#

#
# CPU Usage
# Based on: https://bbs.archlinux.org/viewtopic.php?pid=981274#p981274
#

cpu=
prevtotal=0
previdle=0
get_cpu() {
  local _cpu a b c idle rest
  read _cpu a b c idle rest < /proc/stat
  local total=$((a + b + c + idle))
  local intervaltotal=$((total - prevtotal))
  [[ $prevtotal -ne 0 ]] \
    && _cpu=$((100 * (intervaltotal - (idle - previdle)) / intervaltotal)) \
    || _cpu=0
  prevtotal=$total
  previdle=$idle
  cpu=$_cpu
}

#
# CPU Temperature
# See also: $ sensors -f
# Based on: https://bbs.archlinux.org/viewtopic.php?pid=981274#p981274
#

temp=
get_temp() {
  local _temp
  _temp=$(cat /sys/class/hwmon/hwmon2/temp2_input 2> /dev/null)
  _temp=$((_temp / 1000))
  temp=$_temp
}

#
# Load
# See also: $ uptime
#

load=
get_load() {
  local _load=$(cut -d ' ' -f 1 /proc/loadavg)
  load=$_load
}

#
# Memory Usage
#

mem=
mem_max=$(free -b | grep Mem: | awk '{ print $2 }')
get_mem() {
  local nums=$(free -b | grep Mem:)
  local cur=$(awk '{ print $3 }' <<< "$nums")
  local _mem=$((cur * 100 / mem_max))
  mem=$_mem
}

#
# Swap Usage
#

swap=
swap_max=$(free -b | grep Swap: | awk '{ print $2 }')
get_swap() {
  [[ $swap_max -eq 0 ]] && swap=0 && return
  local nums=$(free -b | grep Swap:)
  local cur=$(awk '{ print $3 }' <<< "$nums")
  local _swap=$((cur * 100 / swap_max))
  swap=$_swap
}

#
# Total Sockets
# See also:
#  $ netstat -t -s
#  $ lsof -Pn1 +M -i4
#  $ ss -t
#  $ ss -t | grep ^ESTAB
#  /proc/net/sockstat
#  /proc/net/sockstat6
#  /proc/net/tcp
#  /proc/net/tcp6
#

sockets=
get_sockets() {
  local _sockets=$(grep -o 'inuse [0-9]*' /proc/net/sockstat \
    | awk '{ s += $2 } END { print s }')
  sockets=$_sockets
}

#
# Download
# Based on: https://bbs.archlinux.org/viewtopic.php?pid=981274#p981274
#

down=
oldtotaldown=0
get_down() {
  local _down
  local totaldown=$(cat /sys/class/net/wlp*/statistics/rx_bytes 2> /dev/null)
  [[ $oldtotaldown -ne 0 ]] \
    && _down=$(((totaldown - oldtotaldown) / 1024)) \
    || _down=0
  oldtotaldown=$totaldown
  down=$_down
}

#
# Upload
# Based on: https://bbs.archlinux.org/viewtopic.php?pid=981274#p981274
#

up=
oldtotalup=0
get_up() {
  local _up
  local totalup=$(cat /sys/class/net/wlp*/statistics/tx_bytes 2> /dev/null)
  [[ $oldtotalup -ne 0 ]] \
    && _up=$(((totalup - oldtotalup) / 1024)) \
    || _up=0
  oldtotalup=$totalup
  up=$_up
}

#
# SSID
#

ssid=
get_ssid() {
  _ssid=$(nmcli -f name c show --active | sed -n 's/ *$//; 2p')
  [[ -z $_ssid ]] && _ssid='Not Connected'
  ssid=$_ssid
}

#
# Time
#

time=
get_time() {
  local _time=$(date '+%a, %b %e - %l:%M%P' | sed 's/  / /g')
  time=$_time
}

#
# Volume / ALSA
#

vol=
get_vol() {
  local data=$(amixer get Master)
  local _vol=$(grep -m 1 -o '[0-9]\+%' <<< "$data")
  local mute=$(grep -m 1 -o '\[off\]' <<< "$data")
  local state
  [[ -z $mute ]] \
    && state='♫' \
    || state='M'
  _vol="${_vol}${state}"
  vol=$_vol
}

#
# Battery
# NOTE: some systems use charge_full/charge_now
# instead of energy_full/energy_now.
# Could use energy_full_design instead of energy_full.
#

battery=
battery_f=$(cat /sys/class/power_supply/BAT0/energy_full 2> /dev/null \
  || cat /sys/class/power_supply/BAT0/charge_full 2> /dev/null)
get_battery() {
  local _battery=0
  local battery_n=$(cat /sys/class/power_supply/BAT0/energy_now 2> /dev/null \
    || cat /sys/class/power_supply/BAT0/charge_now 2> /dev/null)
  [[ -n $battery_n ]] \
    && _battery=$((battery_n * 100 / battery_f))
  local status=$(cat /sys/class/power_supply/BAT0/status 2> /dev/null \
    || echo 'Unknown')
  case "$status" in
    Full | Charged)
      status='F'
    ;;
    Charging)
      status='+'
    ;;
    Discharging)
      status='-'
    ;;
    Unknown | *)
      status='?'
    ;;
  esac
  _battery="$_battery%$status"
  battery=$_battery
}

#
# Backlight
#

backlight=
max_brightness=$(cat /sys/class/backlight/intel_backlight/max_brightness 2> /dev/null)
get_backlight() {
  local brightness=$(cat /sys/class/backlight/intel_backlight/brightness 2> /dev/null)
  backlight=$((brightness * 100 / max_brightness))
}

#
# Main
#

main() {
  local out interval

  interval=$1

  while true; do
    get_cpu
    get_temp
    get_load
    get_mem
    get_swap
    get_sockets
    get_down
    get_up
    get_ssid
    get_backlight
    get_vol
    get_battery
    get_time

    out=$(echo -n "${cpu}%" "${temp}°C" "${load}" '•' "${mem}%+${swap}%" '•' "${sockets}s" "${down}d" "${up}u" '•' "${ssid}" '•' "${backlight}%☼" '•' "${vol}" '•' "${battery}" '•' "${time}")

    xsetroot -name "$out"

    sleep "$interval"
  done
}

#
# Execute
#

main "$@"
